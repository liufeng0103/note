1. 在Spring项目中获取classpath下的资源文件
File cfgFile = ResourceUtils.getFile("classpath:test.txt");
org.springframework.core.io.Resource fileRource = new ClassPathResource("test.txt");  
在jar中
org.springframework.core.io.Resource fileRource = new ClassPathResource("test.txt"); 

2种获取配置文件的方法
ApplicationContext applicationContext = new FileSystemXmlApplicationContext("WebContent/WEB-INF/applicationContext.xml");  
@ContextConfiguration({"file:WebContent/WEB-INF/applicationContext.xml"})  

在spring的项目中做JUint测试
@RunWith(SpringJUnit4ClassRunner.class)  
@ContextConfiguration({"file:src/main/webapp/WEB-INF/applicationContext.xml"})  
public class SuFriendServiceImplOverRMITest {  
}

1. 官网 http://spring.io/
2. 当前学习版本Spring4
3. 常用注释@Controller @Service @Component @Repository
4. 获取spring的context ApplicationContext context = new ClassPathXmlApplicationContext("spring-config.xml");
5. Spring4 对于Rest的方式加入了@RestController,这样可以不用写@ResponseBody了
6. 快速运行Spring应用。需要用到spring boot包
	@ComponentScan
	@EnableAutoConfiguration
	public class Application {
		public static void main(String[] args) {
			SpringApplication.run(Application.class, args);
		}
	}
7. AtomicLong原子量,java6中的新东西。有兴趣研究线程的时候在学。这里用它了自增一个id
	private final AtomicLong counter = new AtomicLong();
	counter.incrementAndGet()
8. Spring实现rest
	@RestController
	public class GreetingController {
		private static final String template = "Hello, %s!";
		private final AtomicLong counter = new AtomicLong();
		@RequestMapping("/greeting")
		public Greeting greeting(@RequestParam(value="name", defaultValue="World") String name) {
			return new Greeting(counter.incrementAndGet(),
								String.format(template, name));
		}
	}
9. Spring来调用一个rest的web service
	@JsonIgnoreProperties(ignoreUnknown = true)
	public class Page {
		private String name;
		public String getName() {
			return name;
		}
	}
	JsonIgnoreProperties，对于不需要的属性，忽略
	 public static void main(String args[]) {
        RestTemplate restTemplate = new RestTemplate();
        Page page = restTemplate.getForObject("http://graph.facebook.com/pivotalsoftware", Page.class);
        System.out.println("Name:    " + page.getName());
    }
	RestTemplete不仅可以调用GET还可以调用其它的HTTP方式
10. 使用JdbcTemplate访问关系型数据库
	public class Application {

		public static void main(String args[]) {
			// simple DS for test (not for production!)
			SimpleDriverDataSource dataSource = new SimpleDriverDataSource();
			dataSource.setDriverClass(org.h2.Driver.class);
			dataSource.setUsername("sa");
			dataSource.setUrl("jdbc:h2:mem");
			dataSource.setPassword("");

			JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);

			System.out.println("Creating tables");
			jdbcTemplate.execute("drop table customers if exists");
			jdbcTemplate.execute("create table customers(" +
					"id serial, first_name varchar(255), last_name varchar(255))");

			String[] names = "John Woo;Jeff Dean;Josh Bloch;Josh Long".split(";");
			for (String fullname : names) {
				String[] name = fullname.split(" ");
				System.out.printf("Inserting customer record for %s %s\n", name[0], name[1]);
				jdbcTemplate.update(
						"INSERT INTO customers(first_name,last_name) values(?,?)",
						name[0], name[1]);
			}

			System.out.println("Querying for customer records where first_name = 'Josh':");
			List<Customer> results = jdbcTemplate.query(
					"select * from customers where first_name = ?", new Object[] { "Josh" },
					new RowMapper<Customer>() {
						@Override
						public Customer mapRow(ResultSet rs, int rowNum) throws SQLException {
							return new Customer(rs.getLong("id"), rs.getString("first_name"),
									rs.getString("last_name"));
						}
					});

			for (Customer customer : results) {
				System.out.println(customer);
			}
		}
	}
	
SpringMVC
1. JSP现在不用struts的话，基本就用JSTL + EI了
2. Spring配置ViewResolver
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/pages/"/>
		<property name="suffix" value=".jsp"/>
	</bean> 
	
SpringMVC
1. 在controller，定义需要接受的参数的bean，然后作为参数放在方法中， Spring会自动设置值
	public String login(User user){}
2. 映射多个url
	@RequestMapping(value={"/member/remove","/member/delete"})
3. rest风格参数获取
	@RequestMapping(value="display/{user}")  
    public String displayMember(@PathVariable("user") String user) {}
4. 拦截器
	继承extends HandlerInterceptorAdapter，有默认实现
5. 拦截器可以用来计算请求运行时间