#路由

##例子
```
var bookStoreApp = angular.module('bookStoreApp', ['ngRoute']);
bookStoreApp.config(function($routeProvider){
	$routeProvider.when('/hello',{
		templateUrl: 'tpls/hello.html',
		controller: 'HelloCtrl'
	}).when('/list',{
		templateUrl: 'tpls/bookList.html',
		controller: 'BookListCtrl'
	}).otherwise({
		redirecTo: '/hello'
	})
});
```
$routeProvider为ng自带的路由机制
ng1.2开始route不ng的核心文件里面，需要用的时候要引入angular-route.js
缺点不能进行深层次嵌套的路由，需要用到多层嵌套可以使用angularui的ui-router

##ui-router
- 导入angular-ui-router.js，使用它就不用导入ng自带的路由文件了
- 页面上使用ui-view指令来标识html容器
	<div ui-view></div>
```
var routerApp = angular.module('routerApp', ['ui.router']);
routerApp.config(function($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.otherwise('/index');
    $stateProvider
        .state('index', {
            url: '/index',
            views: {
                '': {
                    templateUrl: 'tpls3/index.html'
                },
                'topbar@index': {
                    templateUrl: 'tpls3/topbar.html'
                },
                'main@index': {
                    templateUrl: 'tpls3/home.html'
                }
            }
        })
        .state('index.usermng', {
            url: '/usermng',
            views: {
                'main@index': {
                    templateUrl: 'tpls3/usermng.html',
                    controller: function($scope, $state) {
                        $scope.addUserType = function() {
                            $state.go("index.usermng.addusertype");
                        }
                    }
                }
            }
        })
        .state('index.usermng.highendusers', {
            url: '/highendusers',
            templateUrl: 'tpls3/highendusers.html'
        })
        .state('index.usermng.normalusers', {
            url: '/normalusers',
            templateUrl: 'tpls3/normalusers.html'
        })
        .state('index.usermng.lowusers', {
            url: '/lowusers',
            templateUrl: 'tpls3/lowusers.html'
        })
        .state('index.usermng.addusertype', {
            url: '/addusertype',
            templateUrl: 'tpls3/addusertypeform.html',
            controller: function($scope, $state) {
                $scope.backToPrevious = function() {
                    window.history.back();
                }
            }
        })
        .state('index.permission', {
            url: '/permission',
            views: {
                'main@index': {
                    template: '这里是权限管理'
                }
            }
        })
        .state('index.report', {
            url: '/report',
            views: {
                'main@index': {
                    template: '这里是报表管理'
                }
            }
        })
        .state('index.settings', {
            url: '/settings',
            views: {
                'main@index': {
                    template: '这里是系统设置'
                }
            }
        })
});
```

##前端路由基本原理
- 哈希#
- html5中新的history api
- 路由的核心是给应用定义“状态”
- 使用路由机制会影响应用的整体编码方式（需要预先定义好状态）
- 考虑兼容性问题与“优雅降级”
