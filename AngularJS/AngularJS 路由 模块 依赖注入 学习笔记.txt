#路由 模块 依赖注入

##模块化

在全局空间上定义变量和函数会污染全局空间，这样的变量和函数实际上是绑定在window对象上的。通过模块化的方式来避免这种用法。

```
<div ng-controller="helloNgCtrl">	
	<div>{{greeting.text}},Angular</div>
</div>
// 通过ng的全局对象angular的module来第一个模块
var helloModule=angular.module('HelloAngular', []);
// 然后在定义的模块上调用controller来定义一个控制器
helloModule.controller('helloNgCtrl', ['$scope', function($scope){
	$scope.greeting = {
		text: 'Hello'
	};
}]);
```

模块是一个集合，在定义的模块上可以有控制器(controller)，指令(directive)，服务(service)，过滤器(filter)等等

##一个真实项目的结构
ProjectName
- app
- - css
- - framework
- - - 第三方所有的库
- - imgs
- - js
- - - app.js	作为启动点的js
- - - controllers.js
- - - directives.js
- - - filters.js
- - - services.js
- - tpls
- - - html代码片段
- - index.html	应用主文件

##使用ngRoute进行视图间的路由
```
var bookStoreApp = angular.module('bookStoreApp', ['ngRoute']);
bookStoreApp.config(function($routeProvider){
	$routeProvider.when('/hello',{
		templateUrl: 'tpls/hello.html',
		controller: 'HelloCtrl'
	}).when('/list',{	//如果有参数可以像这样使用/list:bookId
		templateUrl: 'tpls/bookList.html',
		controller: 'BookListCtrl'
	}).otherwise({
		redirecTo: '/hello'
	})
});
```

##一切从模块开始
Module
- Config
- - Routes
- Filter
- Directive
- Factory,Service,Provider,Value
- Controller

##模块之间的依赖，依赖注入
```
var bookStoreApp = angular.module('bookStoreApp', [
	'ngRoute', 'bookStoreCtrls', 'bookStoreFilters',
	'bootStoreServices', 'bookStoreDirectives'
]);
```